Runtime MetaProgramming
=======================

With runtime metaprogramming we can postpone to runtime the decision to intercept, 
inject and even synthesize methods of classes and interfaces.

For a deep understanding of Groovy’s metaobject protocol (MOP) we need to 
understand Groovy objects and Groovy’s method handling. In Groovy we work 
with three kinds of objects: POJO, POGO and Groovy Interceptors. Groovy 
allows metaprogramming for all types of objects but in a different manner.

   POJO -> A regular Java object whose class can be written in Java 
           or any JVM-language
   
   POGO -> A Groovy object whose class is written in Groovy. It extends 
           java.lang.Object and implements the groovy.lang.GroovyObject interface
    
   Groovy Interceptor -> A Groovy object that implements the groovy.lang.GroovyInterceptable 
                         interface and has method-interception capability.


See the flow chart on https://groovy-lang.org/metaprogramming.html

"The Meta Object Protocol (MOP) is a collection of rules of how a request for a
method call is handled by the Groovy runtime system and how to control 
the intermediate layer". -Groovy in Action 2nd Edition


A Groovy method call will first get through the MOP, no matter if the method is
a Groovy method or a Java method.





